{"version":3,"sources":["Lib/model.ts","Components/Transactions/Transactions.tsx","Components/Balance/Balance.tsx","Components/NewTransaction/NewTransaction.tsx","Lib/api.ts","Components/SearchTransaction/SearchTransaction.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TransactionType","Transactions","className","this","props","transactions","map","transaction","key","React","Component","typeColors","Credit","Debit","TransactionDetail","state","opened","id","onClick","setState","style","color","type","Intl","NumberFormat","maximumFractionDigits","minimumFractionDigits","format","amount","date","BalanceHeader","balance","src","alt","total_balance","NewTransaction","htmlFor","aria-describedby","value","formValue","onChange","e","target","selected","parseInt","cursor","onSubmit","http","path","request","fetch","process","headers","then","res","a","ok","Error","text","json","fetchBalance","method","fetchTransactions","offset","limit","searchTransaction","postTransaction","t","body","JSON","stringify","SearchTransaction","marginTop","compose","f","g","x","Main","transactionForm","setTransactionForm","postNewTransaction","transactionSearchForm","setTransactionSearchForm","Pager","setPage","page","App","useState","setBalance","setTransactions","getBalance","getTransactions","errorHandler","alert","couldThrow","catch","error","message","useEffect","trx","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.43b9b4a6.chunk.js","sourcesContent":["export interface Balance {\n    total_balance: number;\n}\n\nexport enum TransactionType {\n    Credit = \"credit\",\n    Debit = \"debit\",\n}\n\nexport interface TransactionBody {\n    type: TransactionType;\n    amount: number;\n}\n\nexport interface Transaction {\n    id: string;\n    type: TransactionType;\n    amount: number;\n    date: string;\n}","import React from 'react';\nimport './Transactions.css';\nimport {Transaction, TransactionType} from \"../../Lib/model\";\n\nexport class Transactions extends React.Component<{transactions: Transaction[]}> {\n    render () {\n        return (\n            <div className={'wrapper'}>\n                <ul className={'accordion-list'}>\n                    {this.props.transactions.map((transaction, key) =>\n                        <li className={`accordion-list ${key}`}>\n                            <TransactionDetail transaction={transaction} />\n                        </li>)\n                    }\n                </ul>\n            </div>\n        )\n    }\n}\n\nconst typeColors = {\n    [TransactionType.Credit]: \"green\",\n    [TransactionType.Debit]: \"red\",\n};\n\nclass TransactionDetail extends React.Component<{transaction: Transaction}, {opened: string|null}> {\n    state = { opened: null };\n\n    render () {\n        const { props: { transaction }, state: { opened } } = this;\n\n        return (\n            <div className={`accordion-item, ${opened == transaction.id && 'accordion-item--opened'}`}>\n                <div onClick={() => { this.setState(state => ({ opened: state.opened === null ? transaction.id : null })) }}\n                     className={'accordion-item__line'}>\n                    <h5 className={'accordion-item__title'}>\n                        {'   '}\n                        <span style={{color: typeColors[transaction.type]}}>\n                          $ {new Intl.NumberFormat('en-IN', {\n                            maximumFractionDigits: 2, minimumFractionDigits: 2\n                          }).format(transaction.amount)}\n                        </span>\n                    </h5>\n                    <span className={'accordion-item__icon'}/>\n                </div>\n                <div className={'accordion-item__inner'}>\n                    <div className={'accordion-item__content'}>\n                        <p className={'accordion-item__paragraph'}>\n                            ID: {transaction.id}\n                            <br />\n                            Date: {transaction.date}\n                        </p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {Balance} from \"../../Lib/model\";\n\nexport const BalanceHeader: React.FC<{balance: Balance}> = ({ balance }) => {\n    return (\n        <header id=\"header\" className=\"alt\">\n            <span className=\"logo\"><img src=\"images/logo.svg\" alt=\"\"/></span>\n            <h1>$ {new Intl.NumberFormat('en-IN', {\n                maximumFractionDigits: 2, minimumFractionDigits: 2\n            }).format(balance.total_balance)}</h1>\n            <p>This is your current account balance</p>\n        </header>\n    )\n};\n","import React from \"react\";\nimport {TransactionBody, TransactionType} from \"../../Lib/model\";\n\nexport const NewTransaction: React.FC<{\n  onChange: (trx: TransactionBody) => void\n  onSubmit: (trx: TransactionBody) => void,\n  formValue: TransactionBody\n}> = (props) => {\n  return (\n    <div id=\"form\">\n      <div className=\"form-group mb-3\">\n        <label className=\"label-form\"  htmlFor=\"type\" aria-describedby=\"amount\">Type</label>\n        <select\n          value={props.formValue.type}\n          onChange={e => props.onChange({...props.formValue, type: e.target.value as TransactionType})}\n          id=\"type\"\n          className=\"custom-select mb-3\"\n        >\n          <option value=\"credit\" selected>Credit</option>\n          <option value=\"debit\">Debit</option>\n        </select>\n      </div>\n      <div className=\"form-group mb-3\">\n        <label className=\"label-form\" htmlFor=\"amount\">Amount</label>\n        <input\n          value={props.formValue.amount}\n          onChange={e => props.onChange({...props.formValue, amount: parseInt(e.target.value, 10)})}\n          id=\"amount\"\n          type=\"number\"\n          className=\"form-control\"\n          aria-describedby=\"amount\"/>\n      </div>\n      <a style={{cursor: \"pointer\"}} onClick={() => props.onSubmit(props.formValue)}>Submit</a>\n    </div>\n  )\n};","import {Balance, Transaction, TransactionBody} from \"./model\";\n\nconst http = <T>(path: string, request: any): Promise<T> => {\n    return fetch(`${process.env.REACT_APP_API_URL}${path}`, {\n        ...request,\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n    }).then(async res => {\n        if (!res.ok) {\n            throw Error(await res.text());\n        }\n        return res.json();\n    })\n};\n\nexport const fetchBalance = (): Promise<Balance> => (\n    http(\"/api/account/balance\", { method: \"GET\" })\n);\n\nexport const fetchTransactions = (offset: number, limit: number): Promise<Transaction[]> => (\n    http(`/api/account/transaction?offset=${offset}&limit=${limit}`, { method: \"GET\" })\n);\n\nexport const searchTransaction = (id: string): Promise<Transaction> => (\n    http(`/api/account/transaction/${id}`, { method: \"GET\" })\n);\n\nexport const postTransaction = (t: TransactionBody): Promise<{}> => (\n    http(\"/api/account/transaction\", { method: \"POST\", body: JSON.stringify(t) })\n);","import React from \"react\";\nimport {TransactionBody, TransactionType} from \"../../Lib/model\";\n\nexport const SearchTransaction: React.FC<{\n  onChange: (trx: string) => void\n  onSubmit: (trx: string) => void,\n  formValue: string\n}> = (props) => {\n  return (\n    <div id=\"form\" style={{marginTop: 15}}>\n      <div className=\"form-group mb-3\">\n        <label className=\"label-form\" htmlFor=\"amount\">ID</label>\n        <input\n          value={props.formValue}\n          onChange={e => props.onChange(e.target.value)}\n          id=\"amount\"\n          type=\"string\"\n          className=\"form-control\"\n          aria-describedby=\"id\"/>\n      </div>\n      <a style={{cursor: \"pointer\"}} onClick={() => props.onSubmit(props.formValue)}>Search</a>\n    </div>\n  )\n};","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Transactions} from \"./Components/Transactions/Transactions\";\nimport {BalanceHeader} from \"./Components/Balance/Balance\";\nimport {NewTransaction} from \"./Components/NewTransaction/NewTransaction\";\n\nimport {fetchBalance, fetchTransactions, postTransaction, searchTransaction} from \"./Lib/api\";\nimport {Transaction, TransactionBody, TransactionType} from \"./Lib/model\";\nimport {SearchTransaction} from \"./Components/SearchTransaction/SearchTransaction\";\n\nfunction compose<T, T1, T2>(f: (a: T) => T1, g: (b: T1) => T2): (a: T) => T2 {\n  return (x) => g(f(x))\n}\n\nconst Main: React.FC<{\n  transactions: Transaction[],\n  transactionForm: TransactionBody,\n  setTransactionForm: (trx: TransactionBody) => void,\n  postNewTransaction: (trx: TransactionBody) => void,\n  transactionSearchForm: string,\n  setTransactionSearchForm: (trx: string) => void,\n  searchTransaction: (trx: string) => void\n}> = ({\n  transactions,\n  transactionForm,\n  setTransactionForm,\n  postNewTransaction,\n  transactionSearchForm,\n  setTransactionSearchForm,\n  searchTransaction\n}) => {\n    return (\n        <div id=\"main\">\n            <section id=\"intro\" className=\"main\">\n                <div className=\"spotlight\">\n                    <div className=\"new-transaction\">\n                        <header className=\"major\">\n                            <h3>New Transaction</h3>\n                        </header>\n                        <NewTransaction formValue={transactionForm}\n                                        onChange={setTransactionForm}\n                                        onSubmit={postNewTransaction}/>\n                        <header className=\"major\" style={{marginTop: 20}}>\n                          <h3>Search Transaction</h3>\n                        </header>\n                        <SearchTransaction formValue={transactionSearchForm}\n                                      onChange={setTransactionSearchForm}\n                                      onSubmit={searchTransaction}/>\n                    </div>\n                    <div className=\"transactions\">\n                        <header className=\"major\">\n                            <h3>Transactions</h3>\n                        </header>\n                        <Transactions transactions={transactions} />\n                    </div>\n                </div>\n            </section>\n        </div>\n    )\n}\n\nconst Pager: React.FC<{setPage: (page: number) => void, page: number}> = ({setPage, page}) => {\n    return (\n        <nav id=\"nav\">\n            <ul>\n                <li><a onClick={() => setPage(page - 1)}>Prev</a></li>\n                <li><a className=\"active\">{page}</a></li>\n                <li><a onClick={() => setPage(page + 1)}>Next</a></li>\n            </ul>\n        </nav>\n    )\n}\n\nconst App: React.FC = () => {\n   const [page, setPage] = useState(0);\n\n    const [balance, setBalance] = useState({total_balance: 0});\n    const [transactions, setTransactions] = useState([] as Transaction[]);\n    const [transactionForm, setTransactionForm] = useState({type: TransactionType.Credit, amount: 0} as TransactionBody);\n    const [transactionSearchForm, setTransactionSearchForm] = useState(\"\");\n\n    async function getBalance() {\n        const balance = await fetchBalance();\n        setBalance(balance);\n\n        return balance\n    }\n    async function getTransactions() {\n        const TRX_PER_PAGE = 5;\n        setTransactions(await fetchTransactions(page * TRX_PER_PAGE, TRX_PER_PAGE));\n    }\n    async function executeSearchTransaction(id: string) {\n        errorHandler(searchTransaction(id).then(compose(JSON.stringify, alert)));\n    }\n\n    async function executeTransaction() {\n        await errorHandler(postTransaction(transactionForm));\n        errorHandler(getBalance());\n        errorHandler(getTransactions());\n    }\n\n    async function changePage(page: number) {\n        setPage(page >= 0 ? page : 0);\n    }\n\n    function errorHandler(couldThrow: Promise<any>) {\n        couldThrow\n          .catch(error => {\n            alert(error.message)\n          });\n    }\n\n    function setTransactionBody(trx: TransactionBody): void {\n        setTransactionForm(trx);\n    }\n\n    function setTransactionSearch(id: string): void {\n      setTransactionSearchForm(id);\n    }\n\n    useEffect(() => {\n        errorHandler(getTransactions())\n    }, [page]);\n\n    useEffect(() => {\n        errorHandler(getBalance())\n    }, []);\n\n    return (\n        <div id=\"wrapper\">\n            <BalanceHeader balance={balance} />\n            <Main\n              postNewTransaction={executeTransaction}\n              setTransactionForm={setTransactionBody}\n              transactions={transactions}\n              transactionForm={transactionForm}\n              searchTransaction={executeSearchTransaction}\n              setTransactionSearchForm={setTransactionSearch}\n              transactionSearchForm={transactionSearchForm}\n            />\n            <Pager setPage={changePage} page={page} />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}